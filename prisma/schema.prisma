// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}

model Profile {
  id        String     @id @default(uuid())
  userId    String     @unique
  name      String
  imageUrl  String     @db.Text
  email     String     @db.Text
  role      MemberRole @default(STUDENT)
  favorites Favorite[]
  basket    Basket[]
  course    Course[]
  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  id        String  @id @default(uuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, courseId], name: "unique_profile_course")
  @@index([courseId])
}

model Basket {
  id         String  @id @default(uuid())
  profile    Profile @relation(fields: [profileId], references: [id])
  profileId  String
  course     Course  @relation(fields: [courseId], references: [id])
  courseId   String
  totalPrice Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, courseId], name: "unique_profile_course")
  @@index([courseId])
}

model Course {
  id          String  @id @default(uuid())
  title       String  @unique
  url         String  @unique
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  instructor  String // Kurs eğitmeni veya yapımcısı

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  courseFeature         CourseFeature?
  courseLearningOutcome CourseLearningOutcome[]
  attachments           Attachment[]
  chapters              Chapter[]
  purchase              Purchase[]
  favorite              Favorite[]
  basket                Basket[]
  reviews               Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([profileId])
}

model CourseFeature {
  id       String @id @default(uuid())
  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  difficulty  Difficulty?
  description String?     @db.Text

  totalDuration  String?  @db.Text
  resourceCount  Int      @default(0) // İndirilebilir kaynak sayısı
  lifetimeAccess Boolean? @default(true) // Ömür boyu erişim özelliği
  shareLink      String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseLearningOutcome {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  outcomeText String // "Bu kursu tamamladığınızda neler öğreneceksiniz?" için metin alanı
  order       Int // Maddelerin sıralaması için kullanılabilir

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  url           String     @unique
  imageUrl      String?
  parentId      String?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[] @relation("Subcategories")
  courses       Course[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([parentId])
}

// kurslara eklenecek yorum ve oylama kısmı
model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId    String
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([userId])
}

// derslere eklenecek dosyaların modeli
model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

//kurs bölümlerinin modeli
model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  muxData     MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

//mux video player modeli
model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

//kursun tamamlanma oranının modeli
model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

//Siparis modeli
model Purchase {
  id       String @id @default(uuid())
  userId   String
  price    Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

//Bu modeli daha sonra ayrıntılı bi şekilde tamamlayacağım 
model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
